/* eslint-env mocha */

/**
 * The following statement is required to ensure that no errors are silently
 * ignored (and thus preventing the tests from behaving as expected).
 */
'use strict'

/**
 * Code under test.
 * @type {any}
 */
const T = require('./index.js')

describe('the "OutboundCxmlMessage" module', function () {
  it('must export a constructor', function () {
    const expected = 'function'
    const actual = typeof T
    expect(actual).to.equal(expected)
  })

  describe('the exported constructor', function () {
    it('must contain a static method of supported message types', function () {
      expect(T).to.have.property('MESSAGE_TYPE')
    })

    describe('the "MESSAGE_TYPE" property', function () {
      it('must be read-only', function () {
        expect(() => {
          T.MESSAGE_TYPE = 'something else'
        }).to.throw()
      })

      it('must return an object that cannot be modified', function () {
        expect(() => {
          T.MESSAGE_TYPE.another_type = 'something else'
        }).to.throw()
      })

      it('must have a property called "test"', function () {
        expect(T.MESSAGE_TYPE).to.have.property('test')
      })

      it('must have a property called "PunchOutOrderRequest"', function () {
        expect(T.MESSAGE_TYPE).to.have.property('PunchOutOrderRequest')
      })

      it('must have a property called "OrderRequest"', function () {
        expect(T.MESSAGE_TYPE).to.have.property('OrderRequest')
      })
    })

    it('must throw an error if not called with any parameter', function () {
      expect(() => {
        const instance = new T() // eslint-disable-line
      }).to.throw()
    })

    it('must create unique instances', function () {
      // const a = new T('test')
      // const b = new T('test')
      // expect(a).to.not.equal(b)
    })

    describe('each instance', function () {
      // const instance = null
    })
  })
})
