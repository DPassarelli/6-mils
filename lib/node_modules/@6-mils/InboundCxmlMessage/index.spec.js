/* eslint-env mocha */

/**
 * Code under test.
 * @type {any}
 */
const T = require('./index.js')

describe('the "InboundCxmlMessage" module', function () {
  it('must export a constructor', function () {
    const expected = 'function'
    const actual = typeof T
    expect(actual).to.equal(expected)
  })

  describe('the exported constructor', function () {
    it('must create unique instances', function () {
      const a = new T()
      const b = new T()
      expect(a).to.not.equal(b)
    })

    describe('each instance', function () {
      let instance = null

      beforeEach(function () {
        instance = new T()
      })

      it('must have a property called "payloadId"', function () {
        expect(instance).to.have.property('payloadId')
      })

      describe('the "payloadId" property', function () {
        it('must have the correct default value', function () {
          const expected = /\d+\.\d+\.\w+@6-mils$/
          const actual = instance.payloadId
          expect(actual).to.match(expected)
        })
      })

      it('must have a property called "timestamp"', function () {
        expect(instance).to.have.property('timestamp')
      })

      describe('the "timestamp" property', function () {
        it('must have the correct default value', function () {
          const now = new Date()
          const then = new Date(instance.timestamp)
          expect(now.getTime() - then.getTime()).to.be.lessThan(10)
        })

        it('must be in ISO8601 format', function () {
          const format = /^20\d{2}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{3})?(Z|[+-]\d{1,2}:\d{2})$/
          expect(instance.timestamp).to.match(format)
        })
      })

      it('must have a property called "version"', function () {
        expect(instance).to.have.property('version')
      })

      describe('the "version" property', function () {
        it('must have the correct default value', function () {
          const expected = '1.2.045'
          const actual = instance.version
          expect(actual).to.equal(expected)
        })
      })

      it('must have a property called "statusCode"', function () {
        expect(instance).to.have.property('statusCode')
      })

      describe('the "statusCode" property', function () {
        it('must have the correct default value', function () {
          const expected = '200'
          const actual = instance.statusCode
          expect(actual).to.equal(expected)
        })
      })

      it('must have a property called "statusText"', function () {
        expect(instance).to.have.property('statusText')
      })

      describe('the "statusText" property', function () {
        it('must have the correct default value', function () {
          const expected = 'success'
          const actual = instance.statusText
          expect(actual).to.equal(expected)
        })
      })

      it('must have a method called "parse"', function () {
        expect(instance).to.have.property('parse')
      })

      describe('the "parse" method', function () {
        it('must return a Promise', function () {
          const result = instance.parse()
          expect(result).to.have.property('then')
        })

        context('with no parameter value', function () {
        })

        context('with a parameter value that is an empty string', function () {
        })

        context('with a parameter value that is not a string', function () {
        })

        context('with a parameter value that is not valid XML', function () {
        })

        context('with a parameter value that is valid XML, but not cXML', function () {
        })

        context('with a parameter value that is valid cXML', function () {
        })
      })
    })
  })
})
