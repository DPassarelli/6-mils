/* eslint-env mocha */

/**
 * Code under test.
 * @type {any}
 */
const T = require('./index.js')

const VALID_CXML = '<?xml version="1.0"?><!DOCTYPE cXML SYSTEM "http://xml.cxml.org/schemas/cXML/1.2.011/cXML.dtd"><cXML xml:lang="en-US" payloadID="successful.order@test.com" timestamp="2019-03-12T18:39:09-08:00"><Response><Status code="400" text="Failure">XML document contained a doctype but failed validation.</Status></Response></cXML>'

describe('the "InboundCxmlMessage" module', function () {
  it('must export a constructor', function () {
    const expected = 'function'
    const actual = typeof T
    expect(actual).to.equal(expected)
  })

  describe('the exported constructor', function () {
    it('must create unique instances', function () {
      const a = new T()
      const b = new T()
      expect(a).to.not.equal(b)
    })

    describe('each instance', function () {
      let instance = null

      beforeEach(function () {
        instance = new T()
      })

      it('must have a property called "payloadId"', function () {
        expect(instance).to.have.property('payloadId')
      })

      describe('the "payloadId" property', function () {
        it('must have the correct default value', function () {
          const expected = /\d+\.\d+\.\w+@6-mils$/
          const actual = instance.payloadId
          expect(actual).to.match(expected)
        })
      })

      it('must have a property called "timestamp"', function () {
        expect(instance).to.have.property('timestamp')
      })

      describe('the "timestamp" property', function () {
        it('must have the correct default value', function () {
          const now = new Date()
          const then = new Date(instance.timestamp)
          expect(now.getTime() - then.getTime()).to.be.lessThan(10)
        })

        it('must be in ISO8601 format', function () {
          const format = /^20\d{2}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{3})?(Z|[+-]\d{1,2}:\d{2})$/
          expect(instance.timestamp).to.match(format)
        })
      })

      it('must have a property called "version"', function () {
        expect(instance).to.have.property('version')
      })

      describe('the "version" property', function () {
        it('must have the correct default value', function () {
          const expected = '1.2.045'
          const actual = instance.version
          expect(actual).to.equal(expected)
        })
      })

      it('must have a property called "statusCode"', function () {
        expect(instance).to.have.property('statusCode')
      })

      describe('the "statusCode" property', function () {
        it('must have the correct default value', function () {
          const expected = '200'
          const actual = instance.statusCode
          expect(actual).to.equal(expected)
        })
      })

      it('must have a property called "statusText"', function () {
        expect(instance).to.have.property('statusText')
      })

      describe('the "statusText" property', function () {
        it('must have the correct default value', function () {
          const expected = 'success'
          const actual = instance.statusText
          expect(actual).to.equal(expected)
        })
      })

      it('must have a method called "parse"', function () {
        expect(instance).to.have.property('parse')
      })

      describe('the "parse" method', function () {
        const ERR_INVALID_INPUT = 'The parameter value for "parse" is required and must be a valid cXML string.'

        context('with no parameter value', function () {
          it('must throw', function () {
            expect(() => {
              instance.parse()
            }).to.throw(ERR_INVALID_INPUT)
          })
        })

        context('with a parameter value that is an empty string', function () {
          it('must throw', function () {
            expect(() => {
              instance.parse('')
            }).to.throw(ERR_INVALID_INPUT)
          })
        })

        context('with a parameter value that is not a string', function () {
          it('must throw', function () {
            expect(() => {
              instance.parse(new Date())
            }).to.throw(ERR_INVALID_INPUT)
          })

          describe('the instance members', function () {
            beforeEach(function () {
              try {
                instance.parse(new Date())
              } catch (e) {
                // ignore
              }
            })

            it('must invalidate the value for "payloadId"', function () {
              expect(instance.payloadId).to.be.null // eslint-disable-line
            })

            it('must invalidate the value for "timestamp"', function () {
              expect(instance.timestamp).to.be.null // eslint-disable-line
            })

            it('must invalidate the value for "version"', function () {
              expect(instance.version).to.be.null // eslint-disable-line
            })

            it('must invalidate the value for "statusCode"', function () {
              expect(instance.statusCode).to.be.null // eslint-disable-line
            })

            it('must invalidate the value for "statusText"', function () {
              expect(instance.statusText).to.be.null // eslint-disable-line
            })
          })
        })

        context('with a parameter value that is not valid XML', function () {
          it('must throw', function () {
            expect(() => {
              instance.parse('something other than <xml>')
            }).to.throw(ERR_INVALID_INPUT)
          })

          describe('the instance members', function () {
            beforeEach(function () {
              try {
                instance.parse('something other than <xml>')
              } catch (e) {
                // ignore
              }
            })

            it('must invalidate the value for "payloadId"', function () {
              expect(instance.payloadId).to.be.null // eslint-disable-line
            })

            it('must invalidate the value for "timestamp"', function () {
              expect(instance.timestamp).to.be.null // eslint-disable-line
            })

            it('must invalidate the value for "version"', function () {
              expect(instance.version).to.be.null // eslint-disable-line
            })

            it('must invalidate the value for "statusCode"', function () {
              expect(instance.statusCode).to.be.null // eslint-disable-line
            })

            it('must invalidate the value for "statusText"', function () {
              expect(instance.statusText).to.be.null // eslint-disable-line
            })
          })
        })

        context('with a parameter value that is valid cXML', function () {
          beforeEach(function () {
            instance.parse(VALID_CXML)
          })

          it('must populate the "payloadId" property correctly', function () {
            const expected = 'successful.order@test.com'
            const actual = instance.payloadId
            expect(actual).to.equal(expected)
          })

          it('must populate the "timestamp" property correctly', function () {
            const expected = '2019-03-12T18:39:09-08:00'
            const actual = instance.timestamp
            expect(actual).to.equal(expected)
          })

          it('must populate the "version" property correctly', function () {
            const expected = '1.2.011'
            const actual = instance.version
            expect(actual).to.equal(expected)
          })

          it('must populate the "statusCode" property correctly', function () {
            const expected = '400'
            const actual = instance.statusCode
            expect(actual).to.equal(expected)
          })

          it('must populate the "statusText" property correctly', function () {
            const expected = 'XML document contained a doctype but failed validation.'
            const actual = instance.statusText
            expect(actual).to.equal(expected)
          })

          it('must populate the "statusText" property correctly (if the response does not contain a status description)', function () {
            const t = new T()
            const modifiedCxml = VALID_CXML.replace('XML document contained a doctype but failed validation.', '')

            t.parse(modifiedCxml)

            const expected = 'Failure'
            const actual = t.statusText
            expect(actual).to.equal(expected)
          })
        })
      })

      it('must have a method called "query"', function () {
        expect(instance).to.have.property('query')
      })

      describe('the "query" method', function () {
        const ERR_INVALID_INPUT = 'The parameter value for "query" is required and must be a string containing a valid XPath expression.'

        context('with no parameter value', function () {
          it('must throw', function () {
            expect(() => {
              instance.query()
            }).to.throw(ERR_INVALID_INPUT)
          })
        })

        context('with a parameter value that is an empty string', function () {
          it('must throw', function () {
            expect(() => {
              instance.query('')
            }).to.throw(ERR_INVALID_INPUT)
          })
        })

        context('with a parameter value that is not a string', function () {
          it('must throw', function () {
            expect(() => {
              instance.query(new Date())
            }).to.throw(ERR_INVALID_INPUT)
          })
        })

        context('with a parameter value that is not a valid XPath expression', function () {
          it('must throw', function () {
            expect(() => {
              instance.query('\not\valid:xpath[[1]]*')
            }).to.throw(ERR_INVALID_INPUT)
          })
        })

        context('with a parameter value that is a valid XPath expression', function () {
          const validXPathExpression = '/cXML/@xml:lang/data()'

          context('before calling "parse"', function () {
            it('must throw', function () {
              expect(() => {
                instance.query(validXPathExpression)
              }).to.throw('There is nothing to query. Call "parse" with valid cXML first, and then call "query".')
            })
          })

          context('after calling "parse" with valid cXML', function () {
            it('must return the correct value', function () {
              const expected = 'en-US'

              instance.parse(VALID_CXML)

              const actual = instance.query(validXPathExpression)
              expect(actual).to.equal(expected)
            })
          })

          context('after calling "parse" with a non-string value', function () {
            it('must throw', function () {
              try {
                instance.parse(new Date())
              } catch (e) {
                // ignore
              }

              expect(() => {
                instance.query(validXPathExpression)
              }).to.throw('There is nothing to query. Call "parse" with valid cXML first, and then call "query".')
            })
          })

          context('after calling "parse" with invalid XML', function () {
            it('must throw', function () {
              try {
                instance.parse('// invalid <xml>??')
              } catch (e) {
                // ignore
              }

              expect(() => {
                instance.query(validXPathExpression)
              }).to.throw('There is nothing to query. Call "parse" with valid cXML first, and then call "query".')
            })
          })
        })
      })
    })
  })
})
